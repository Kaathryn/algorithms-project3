import networkx as nximport matplotlib.pyplot as plt#1#2edges = [(1, 3), (3, 2), (4, 1), (2, 1), (4, 2),          (3, 5), (5, 6), (5, 8), (6, 8), (6, 7),         (6, 10), (8, 10), (10, 9), (10, 11), (8, 9),         (9, 5), (7, 10), (9, 11), (11, 12), (4, 12)]print(len(edges))G = nx.DiGraph()G.add_edges_from(edges)scc = list(nx.strongly_connected_components(G))print("Strongly Connected Components:")for i in scc:    print(i)meta_graph = nx.condensation(G)pos = nx.spring_layout(meta_graph)nx.draw(meta_graph, pos, with_labels = True, node_size = 1000, node_color = 'skyblue')plt.title("Meta Graph of Strongly Connected Components")plt.show()topological = list(nx.topological_sort(meta_graph))print("Topological Order:")print(topological)nx.draw_kamada_kawai(G, with_labels = True)plt.show()#3G3 = nx.Graph()G3edges = [('A', 'B', 22), ('A', 'C', 9), ('A', 'D', 12),            ('B', 'C', 35), ('C', 'D', 4), ('C', 'E', 65),            ('D', 'E', 33), ('B', 'F', 36), ('C', 'F', 42),           ('E', 'F', 18), ('F', 'G', 39), ('E', 'G', 23),           ('B', 'H', 34), ('F', 'H', 24), ('G', 'H', 25),           ('D', 'I', 30), ('G', 'I', 21), ('H', 'I', 19)]G3.add_weighted_edges_from(G3edges)plt.figure()nx.draw(G3, with_labels = True, node_size = 700)plt.show()#a) dijkstra_path(G3, )print("Dijkstra's Shortest Path")#b) Minimum spanning tree for a connected weighted graph#c) Are a shortest path tree and a minimum spanning tree usually #   the same? #d) If the graph has an edge with a negative weight, can you apply #   Dijkstraâ€™s algorithm to find a shortest path tree?